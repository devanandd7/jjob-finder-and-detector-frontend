import React, { createContext, useContext, useState, useEffect, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, signOut, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import { ToastContainer, toast } from 'react-toastify';
// import 'react-toastify/dist/ReactToastify.css'; // This line caused the error and is now removed
import { useForm } from 'react-hook-form';
import { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, Legend, PieChart, Pie, Cell } from 'recharts';

// Simulate Next.js Link and useRouter for single-file preview
const Link = ({ href, children, className }) => {
  const { setCurrentPath } = useContext(AppContext);
  const handleClick = (e) => {
    e.preventDefault();
    setCurrentPath(href);
  };
  return <a href={href} onClick={handleClick} className={className}>{children}</a>;
};

const useRouter = () => {
  const { setCurrentPath } = useContext(AppContext);
  return {
    push: (path) => setCurrentPath(path),
    // For this simplified preview, we don't need actual router.query or asPath
    query: {},
    asPath: ''
  };
};

// Global variables provided by the Canvas environment
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Create Firebase app and services
let appInstance;
let dbInstance;
let authInstance;

// Initialize Firebase only once
// We add a check for firebaseConfig to ensure it's not empty, which might happen in some environments
if (Object.keys(firebaseConfig).length > 0) {
  try {
    appInstance = initializeApp(firebaseConfig);
    dbInstance = getFirestore(appInstance);
    authInstance = getAuth(appInstance);
  } catch (e) {
    console.error("Firebase initialization failed:", e);
    // Handle cases where Firebase might already be initialized (e.g., hot reload in dev)
    // or if config is invalid.
  }
} else {
  console.warn("Firebase config is empty. Firebase services will not be initialized.");
}

// Create a context for user authentication
export const UserContext = createContext();
export const AppContext = createContext(); // Context for simplified routing

export function UserProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true); // Loading state for auth
  const [userId, setUserId] = useState(null);

  useEffect(() => {
    if (!authInstance) {
      console.error("Firebase Auth is not initialized. Skipping authentication.");
      setLoading(false);
      return;
    }

    // Sign in with custom token or anonymously
    const authenticateUser = async () => {
      try {
        if (initialAuthToken) {
          await signInWithCustomToken(authInstance, initialAuthToken);
        } else {
          await signInAnonymously(authInstance);
        }
      } catch (error) {
        console.error("Firebase authentication error:", error);
        toast.error(`Authentication failed: ${error.message}`);
      }
    };

    authenticateUser();

    // Set up auth state listener
    const unsubscribe = onAuthStateChanged(authInstance, (currentUser) => {
      setUser(currentUser);
      if (currentUser) {
        setUserId(currentUser.uid); // Set UID if authenticated
      } else {
        setUserId(crypto.randomUUID()); // Use a random UUID if not authenticated for guests
      }
      setLoading(false);
    });

    // Cleanup subscription on unmount
    return () => unsubscribe();
  }, []); // authInstance and initialAuthToken are stable references from the closure

  const value = {
    user,
    userId, // Expose userId
    loading,
    db: dbInstance, // Expose db instance
    auth: authInstance, // Expose auth instance
    appId, // Expose appId
    signOut: async () => {
      try {
        if (authInstance) {
          await signOut(authInstance);
          toast.success("Logged out successfully!");
        } else {
          console.warn("Auth instance not available for sign out.");
          toast.error("Logout failed: Auth service not available.");
        }
      } catch (error) {
        console.error("Error signing out:", error);
        toast.error(`Logout failed: ${error.message}`);
      }
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <div className="text-xl font-semibold text-gray-700">Loading application...</div>
      </div>
    );
  }

  return (
    <UserContext.Provider value={value}>
      {children}
    </UserContext.Provider>
  );
}


// components/Layout.jsx
const Layout = ({ children }) => {
  const { user, userId, signOut } = useContext(UserContext);
  const router = useRouter(); // Use the mock useRouter

  const handleLogout = () => {
    signOut();
    router.push('/login'); // Redirect to login after logout
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col font-sans antialiased text-gray-800">
      <header className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white shadow-lg rounded-b-xl p-4 md:p-6 mb-8 flex justify-between items-center">
        <div className="text-3xl font-extrabold tracking-tight">
          <Link href="/">
            <a className="hover:text-blue-200 transition-colors duration-200">AI Job Finder</a>
          </Link>
        </div>
        <nav className="flex items-center space-x-4 md:space-x-6">
          {user ? (
            <>
              <Link href="/upload-resume">
                <a className="text-white hover:text-blue-200 transition-colors duration-200 text-lg font-medium">Upload Resume</a>
              </Link>
              <Link href="/job-results">
                <a className="text-white hover:text-blue-200 transition-colors duration-200 text-lg font-medium">Job Results</a>
              </Link>
              <Link href="/dashboard">
                <a className="text-white hover:text-blue-200 transition-colors duration-200 text-lg font-medium">Dashboard</a>
              </Link>
              <button
                onClick={handleLogout}
                className="bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded-lg shadow-md transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 text-lg font-medium"
              >
                Logout
              </button>
            </>
          ) : (
            <>
              <Link href="/login">
                <a className="bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded-lg shadow-md transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 text-lg font-medium">Login / Signup</a>
              </Link>
            </>
          )}
        </nav>
      </header>

      <main className="container mx-auto px-4 py-8 flex-grow">
        {userId && (
          <div className="text-right text-sm text-gray-600 mb-4">
            Current User ID: <span className="font-mono bg-gray-200 px-2 py-1 rounded-md">{userId}</span>
          </div>
        )}
        {children}
      </main>

      <footer className="bg-gray-800 text-white p-4 md:p-6 mt-8 rounded-t-xl text-center shadow-inner">
        <p>&copy; {new Date().getFullYear()} AI Job Finder. All rights reserved.</p>
      </footer>
    </div>
  );
};


// pages/index.js
const HomePage = () => {
  const { user, loading } = useContext(UserContext);

  if (loading) {
    return (
      <div className="flex items-center justify-center py-10">
        <p className="text-lg text-gray-600">Loading user state...</p>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-[calc(100vh-200px)] py-10 px-4">
      <div className="bg-white p-8 md:p-12 rounded-2xl shadow-xl border border-gray-200 text-center max-w-2xl w-full">
        <h1 className="text-4xl md:text-5xl font-extrabold text-gray-900 mb-6 leading-tight">
          Welcome to the <span className="text-blue-600">AI Job Finder</span>
        </h1>
        <p className="text-lg md:text-xl text-gray-700 mb-8 leading-relaxed">
          Streamline your job search with our intelligent platform that identifies real opportunities and helps you avoid scams.
        </p>

        {user ? (
          <Link href="/upload-resume">
            <a className="bg-blue-600 hover:bg-blue-700 text-white text-xl font-bold py-4 px-8 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300">
              Start Job Search
            </a>
          </Link>
        ) : (
          <div className="flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4">
            <Link href="/login">
              <a className="bg-indigo-600 hover:bg-indigo-700 text-white text-xl font-bold py-4 px-8 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-indigo-300">
                Login
              </a>
            </Link>
            <Link href="/login">
              <a className="bg-gray-800 hover:bg-gray-700 text-white text-xl font-bold py-4 px-8 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-gray-600">
                Signup
              </a>
            </Link>
          </div>
        )}
      </div>
    </div>
  );
};


// pages/login.js
const LoginPage = () => {
  const { register, handleSubmit, formState: { errors } } = useForm();
  const [isLoginMode, setIsLoginMode] = useState(true);
  const { auth, loading: authLoading } = useContext(UserContext); // Access auth instance and loading state
  const router = useRouter(); // Use the mock useRouter
  const [formLoading, setFormLoading] = useState(false); // Loading state for form submission

  if (authLoading) {
    return (
      <div className="flex items-center justify-center py-10">
        <p className="text-lg text-gray-600">Loading authentication...</p>
      </div>
    );
  }

  const onSubmit = async (data) => {
    setFormLoading(true);
    try {
      if (!auth) {
        toast.error("Authentication service not available.");
        return;
      }
      if (isLoginMode) {
        // Login existing user
        await signInWithEmailAndPassword(auth, data.email, data.password);
        toast.success("Logged in successfully!");
      } else {
        // Create new user
        await createUserWithEmailAndPassword(auth, data.email, data.password);
        toast.success("Account created and logged in successfully!");
      }
      router.push('/upload-resume'); // Redirect to upload resume page on success
    } catch (error) {
      console.error("Authentication error:", error);
      toast.error(`Authentication failed: ${error.message}`);
    } finally {
      setFormLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center py-10 px-4">
      <div className="bg-white p-8 md:p-12 rounded-2xl shadow-xl border border-gray-200 max-w-md w-full">
        <h2 className="text-3xl font-extrabold text-gray-900 text-center mb-8">
          {isLoginMode ? 'Login to Your Account' : 'Create an Account'}
        </h2>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
            <input
              id="email"
              type="email"
              {...register('email', { required: 'Email is required', pattern: /^\S+@\S+$/i })}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-lg placeholder-gray-400"
              placeholder="you@example.com"
            />
            {errors.email && <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>}
          </div>

          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">Password</label>
            <input
              id="password"
              type="password"
              {...register('password', { required: 'Password is required', minLength: { value: 6, message: 'Password must be at least 6 characters' } })}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-lg placeholder-gray-400"
              placeholder="••••••••"
            />
            {errors.password && <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>}
          </div>

          <div>
            <button
              type="submit"
              disabled={formLoading}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 text-xl disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
            >
              {formLoading && (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              )}
              {isLoginMode ? (formLoading ? 'Logging In...' : 'Login') : (formLoading ? 'Signing Up...' : 'Signup')}
            </button>
          </div>
        </form>

        <div className="mt-6 text-center">
          <button
            onClick={() => setIsLoginMode(!isLoginMode)}
            className="text-blue-600 hover:text-blue-800 font-medium transition-colors duration-200"
          >
            {isLoginMode ? 'Need an account? Signup' : 'Already have an account? Login'}
          </button>
        </div>
      </div>
    </div>
  );
};


// pages/upload-resume.js
const UploadResumePage = () => {
  return (
    <div className="flex flex-col items-center justify-center py-10 px-4">
      <div className="bg-white p-8 md:p-12 rounded-2xl shadow-xl border border-gray-200 max-w-3xl w-full text-center">
        <h2 className="text-3xl font-extrabold text-gray-900 mb-6">Upload Your Resume & Preferences</h2>
        <p className="text-lg text-gray-700 mb-8">
          Upload your resume (PDF/DOCX) and tell us about your job preferences to get started.
        </p>

        {/* Placeholder for file upload and form */}
        <div className="border-2 border-dashed border-gray-300 rounded-lg p-10 mb-6">
          <p className="text-gray-500 mb-4">Drag & drop your resume here, or click to select file</p>
          <input type="file" className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 cursor-pointer" />
        </div>

        <form className="space-y-4 text-left">
          <div>
            <label htmlFor="skills" className="block text-sm font-medium text-gray-700 mb-1">Skills (comma-separated)</label>
            <input
              type="text"
              id="skills"
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-lg"
              placeholder="e.g., React, Node.js, AWS"
            />
          </div>
          <div>
            <label htmlFor="role" className="block text-sm font-medium text-gray-700 mb-1">Desired Role</label>
            <input
              type="text"
              id="role"
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-lg"
              placeholder="e.g., Software Engineer, Data Scientist"
            />
          </div>
          <div>
            <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-1">Location</label>
            <input
              type="text"
              id="location"
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-lg"
              placeholder="e.g., New York, Remote"
            />
          </div>
          <button
            type="submit"
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 text-xl mt-6"
          >
            Submit Preferences
          </button>
        </form>
      </div>
    </div>
  );
};


// pages/job-results.js
const JobResultsPage = () => {
  const [activeTab, setActiveTab] = useState('real'); // 'real' or 'fake'

  const realJobs = [
    { id: 1, title: 'Senior Frontend Developer', company: 'Tech Solutions Inc.', location: 'Remote', description: 'This is a description for a senior frontend developer position. It requires strong React and Tailwind CSS skills.' },
    { id: 2, title: 'Full Stack Engineer', company: 'InnovateX', location: 'San Francisco, CA', description: 'Seeking a versatile full stack engineer proficient in Node.js, Express, and React.' },
    { id: 3, title: 'UX Designer', company: 'Creative Studio', location: 'New York, NY', description: 'We are looking for a creative UX designer with a passion for user-centered design.' },
  ];

  const fakeJobs = [
    { id: 101, title: 'Work From Home Data Entry (High Pay)', company: 'Unknown LLC', location: 'Anywhere', description: 'Earn $5000 per week just by typing data. No experience needed, quick money.', reported: true },
    { id: 102, title: 'Mystery Shopper - Earn $500/hr!', company: 'Phony Offers', location: 'Your City', description: 'Be a mystery shopper and get paid instantly. Send us your bank details to get started.', reported: true },
  ];

  return (
    <div className="py-10 px-4">
      <div className="bg-white p-8 md:p-12 rounded-2xl shadow-xl border border-gray-200 max-w-4xl mx-auto">
        <h2 className="text-3xl font-extrabold text-gray-900 text-center mb-8">Job Search Results</h2>

        <div className="flex justify-center mb-6 border-b border-gray-200">
          <button
            onClick={() => setActiveTab('real')}
            className={`py-3 px-6 text-xl font-medium focus:outline-none transition-colors duration-200 ${
              activeTab === 'real'
                ? 'border-b-4 border-blue-600 text-blue-700'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            Real Jobs ({realJobs.length})
          </button>
          <button
            onClick={() => setActiveTab('fake')}
            className={`py-3 px-6 text-xl font-medium focus:outline-none transition-colors duration-200 ${
              activeTab === 'fake'
                ? 'border-b-4 border-red-600 text-red-700'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            Fake Jobs ({fakeJobs.length})
          </button>
        </div>

        <div className="mt-8">
          {activeTab === 'real' && (
            <div>
              {realJobs.length === 0 ? (
                <p className="text-center text-gray-600 text-lg">No real jobs found yet. Please adjust your preferences.</p>
              ) : (
                <ul className="space-y-6">
                  {realJobs.map((job) => (
                    <li key={job.id} className="bg-gray-50 p-6 rounded-xl shadow-md border border-gray-100 flex flex-col sm:flex-row justify-between items-start sm:items-center">
                      <div className="mb-4 sm:mb-0">
                        <h3 className="text-xl font-bold text-gray-900">{job.title}</h3>
                        <p className="text-md text-gray-700">{job.company} - {job.location}</p>
                        <p className="text-sm text-gray-600 mt-2">{job.description.substring(0, 100)}...</p>
                      </div>
                      <button className="bg-green-600 hover:bg-green-700 text-white px-5 py-2 rounded-lg shadow-md transition-all duration-200 transform hover:scale-105 text-lg font-medium w-full sm:w-auto">
                        Select to Apply
                      </button>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          )}

          {activeTab === 'fake' && (
            <div>
              {fakeJobs.length === 0 ? (
                <p className="text-center text-gray-600 text-lg">No fake jobs detected!</p>
              ) : (
                <ul className="space-y-6">
                  {fakeJobs.map((job) => (
                    <li key={job.id} className="bg-red-50 p-6 rounded-xl shadow-md border border-red-200">
                      <h3 className="text-xl font-bold text-red-800">{job.title}</h3>
                      <p className="text-md text-red-700">{job.company} - {job.location}</p>
                      <p className="text-sm text-red-600 mt-2">{job.description.substring(0, 100)}...</p>
                      {job.reported && (
                        <p className="text-sm text-red-500 font-semibold mt-3">Status: Auto-reported as Scam</p>
                      )}
                    </li>
                  ))}
                </ul>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};


// pages/application-automation.js
const ApplicationAutomationPage = () => {
  // Mock data for selected jobs
  const [selectedJobs, setSelectedJobs] = useState([
    { id: 1, title: 'Senior Frontend Developer', company: 'Tech Solutions Inc.', status: 'Pending' },
    { id: 2, title: 'Full Stack Engineer', company: 'InnovateX', status: 'Pending' },
  ]);

  const handleApplyAutomatically = () => {
    // Simulate API call and status updates
    setSelectedJobs(prevJobs =>
      prevJobs.map(job => {
        if (job.status === 'Pending') {
          const randomStatus = ['Applied', 'Failed'][Math.floor(Math.random() * 2)];
          return { ...job, status: randomStatus };
        }
        return job;
      })
    );
  };

  return (
    <div className="py-10 px-4">
      <div className="bg-white p-8 md:p-12 rounded-2xl shadow-xl border border-gray-200 max-w-3xl mx-auto text-center">
        <h2 className="text-3xl font-extrabold text-gray-900 mb-6">Application Automation</h2>
        <p className="text-lg text-gray-700 mb-8">
          Review the jobs you've selected and click "Apply Automatically" to let our AI agent handle the applications.
        </p>

        {selectedJobs.length === 0 ? (
          <p className="text-center text-gray-600 text-lg">No jobs selected for automatic application.</p>
        ) : (
          <div className="mb-8">
            <ul className="space-y-4">
              {selectedJobs.map((job) => (
                <li key={job.id} className="bg-gray-50 p-5 rounded-xl shadow-sm border border-gray-100 flex flex-col sm:flex-row justify-between items-start sm:items-center">
                  <div className="mb-2 sm:mb-0">
                    <h3 className="text-xl font-semibold text-gray-900">{job.title}</h3>
                    <p className="text-md text-gray-700">{job.company}</p>
                  </div>
                  <span className={`px-4 py-2 rounded-full text-lg font-bold
                    ${job.status === 'Applied' ? 'bg-green-100 text-green-700' : ''}
                    ${job.status === 'Failed' ? 'bg-red-100 text-red-700' : ''}
                    ${job.status === 'Pending' ? 'bg-yellow-100 text-yellow-700 animate-pulse' : ''}
                  `}>
                    {job.status}
                  </span>
                </li>
              ))}
            </ul>
            <button
              onClick={handleApplyAutomatically}
              className="mt-8 w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 text-xl"
            >
              Apply Automatically
            </button>
          </div>
        )}
      </div>
    </div>
  );
};


// pages/dashboard.js
const DashboardPage = () => {
  // Mock data for charts
  const jobStatusData = [
    { name: 'Total Jobs Found', value: 150 },
    { name: 'Real Jobs', value: 100 },
    { name: 'Fake Jobs', value: 50 },
    { name: 'Jobs Applied', value: 75 },
    { name: 'Jobs Reported', value: 20 },
  ];

  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF'];

  return (
    <div className="py-10 px-4">
      <div className="bg-white p-8 md:p-12 rounded-2xl shadow-xl border border-gray-200 max-w-5xl mx-auto">
        <h2 className="text-3xl font-extrabold text-gray-900 text-center mb-8">Your Application Dashboard</h2>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="bg-gray-50 p-6 rounded-xl shadow-md border border-gray-100">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Job Status Overview (Bar Chart)</h3>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart
                data={jobStatusData}
                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
              >
                <XAxis dataKey="name" angle={-15} textAnchor="end" height={60} interval={0} />
                <YAxis />
                <Tooltip cursor={{ fill: 'transparent' }} />
                <Legend />
                <Bar dataKey="value" fill="#8884d8" name="Count" radius={[10, 10, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </div>

          <div className="bg-gray-50 p-6 rounded-xl shadow-md border border-gray-100">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Real vs. Fake Jobs (Pie Chart)</h3>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={jobStatusData.filter(d => d.name === 'Real Jobs' || d.name === 'Fake Jobs')}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={100}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                >
                  {jobStatusData.filter(d => d.name === 'Real Jobs' || d.name === 'Fake Jobs').map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>

        <div className="mt-8 text-center">
          <h3 className="text-xl font-bold text-gray-800 mb-4">Summary Statistics</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {jobStatusData.map((item) => (
              <div key={item.name} className="bg-blue-50 p-4 rounded-lg shadow-sm">
                <p className="text-md font-medium text-blue-700">{item.name}</p>
                <p className="text-3xl font-extrabold text-blue-900">{item.value}</p>
              </div>
            ))}
          </div>
        </div>

        <div className="mt-8 flex justify-center space-x-4">
          <button className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 text-lg">
            View History
          </button>
          <button className="bg-gray-700 hover:bg-gray-800 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-gray-600 text-lg">
            Download Logs
          </button>
        </div>
      </div>
    </div>
  );
};


// Main App component combining all pages and contexts for preview
function App() {
  const [currentPath, setCurrentPath] = useState('/');

  // Simulate global CSS for Tailwind and font
  useEffect(() => {
    const style = document.createElement('style');
    style.innerHTML = `
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');
      body {
        font-family: 'Inter', sans-serif;
      }
      @tailwind base;
      @tailwind components;
      @tailwind utilities;
    `;
    document.head.appendChild(style);

    // Inject react-toastify CSS via CDN
    const toastifyLink = document.createElement('link');
    toastifyLink.rel = 'stylesheet';
    toastifyLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/react-toastify/9.1.1/ReactToastify.min.css';
    document.head.appendChild(toastifyLink);


    return () => {
      document.head.removeChild(style);
      document.head.removeChild(toastifyLink); // Clean up on unmount
    };
  }, []);

  const renderPage = () => {
    switch (currentPath) {
      case '/':
        return <HomePage />;
      case '/login':
        return <LoginPage />;
      case '/upload-resume':
        return <UploadResumePage />;
      case '/job-results':
        return <JobResultsPage />;
      case '/application-automation':
        return <ApplicationAutomationPage />;
      case '/dashboard':
        return <DashboardPage />;
      default:
        return <HomePage />;
    }
  };

  return (
    <AppContext.Provider value={{ currentPath, setCurrentPath }}>
      <UserProvider>
        <Layout>
          {renderPage()}
          <ToastContainer position="bottom-right" autoClose={3000} hideProgressBar={false} newestOnTop={false} closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />
        </Layout>
      </UserProvider>
    </AppContext.Provider>
  );
}

export default App;
